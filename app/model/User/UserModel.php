<?php
/* Generated by neoan3-cli */

namespace Neoan3\Model\User;

use Neoan3\Core\RouteException;
use Neoan3\Provider\MySql\Database;
use Neoan3\Provider\Model\Model;
use Neoan3\Provider\MySql\Transform;

/**
 * Class UserModel
 * @package Neoan3\Model\User
 * @method static get(string $id)
 * @method static create(array $modelArray)
 * @method static update(array $modelArray)
 * @method static find(array $conditionArray)
 * @method static delete(string $id, bool $hard = false)
 */

class UserModel implements Model{

    /**
     * @var Database|null
     */
    private static ?Database $db = null;


    /**
     * @param $method
     * @param $args
     * @return mixed
     */
    public static function __callStatic($method, $args)
    {

        if(!method_exists(self::class, $method)){
            $transform = new Transform('user', self::$db);
            return self::clean($transform->$method(...$args));
        } else {
            return self::$method(...$args);
        }
    }

    private static function clean($results)
    {
        if(empty($results)){
            return [];
        }
        // single
        if(isset($results['id'])){
            $results = self::hide($results);
        } else {
            foreach ($results as $i => $user){
                $results[$i] = self::hide($user);
            }
        }
        return $results;
    }
    private static function hide($user)
    {
        unset($user['password']);
        unset($user['verification_hash']);
        return $user;
    }

    /**
     * @throws RouteException
     */
    static public function register($credentials) {
        $insert = [
            'password' => '=' . password_hash($credentials['password'], PASSWORD_DEFAULT),
            'email'=> $credentials['email'],
            'verification_hash' => mb_substr(bin2hex(random_bytes(28)), 0, 28)
        ];
        try{
            return self::create($insert);
        } catch (\Exception $e) {
            throw new RouteException('Unable to register', 400);
        }

    }

    /**
     * @throws RouteException
     */
    static public function login($credentials) {
        $user = self::$db->easy('user.*', ['email'=>$credentials['email']]);
        if(empty($user) || !password_verify($credentials['password'],$user[0]['password'])){
            throw new RouteException('Wrong credentials', 401);
        }
        return $user[0];
    }

    /**
     * @param array $providers
     */
    public static function init(array $providers)
    {
        foreach ($providers as $key => $provider){
            if($key === 'db'){
                self::$db = $provider;
            }
        }
    }

}