<?php
/* Generated by neoan3-cli */

namespace Neoan3\Apps;

use Firebase\JWT\ExpiredException;
use Firebase\JWT\JWT as FbJWT;
use Firebase\JWT\SignatureInvalidException;

class Jwt  {
    /**
     * @var null
     */
    private static $_token=null;
    /**
     * @var array
     */
    private static $_protectedKeys = ['iss','aud','iat'];
    /**
     * @var string
     */
    private static $_algorithm = 'HS256';

    /**
     * @param $key
     *
     * @return string
     */
    static function encode($key){

        if(!self::$_token){
            self::generateToken();
        }
        return FbJWT::encode(self::$_token,$key,self::$_algorithm);
    }

    /**
     * @param $jwt
     * @param $key
     *
     * @return array
     */
    static function decode($jwt,$key){
        try{
            $decoded = FbJWT::decode($jwt,$key,[self::$_algorithm]);
            if($decoded){
                return ['error'=>false,'decoded'=>(array) $decoded];
            }
        } catch (SignatureInvalidException $e){
            return ['error'=>'invalid'];
        } catch (ExpiredException $e){
            return ['error'=>'expired'];
        }catch(\UnexpectedValueException $e){
            return ['error'=>'Authentication misformed'];
        }
        return ['error'=>'encoding'];
    }

    /**
     * @param $assoc
     *
     * @throws Exception
     */
    static function payload($assoc){
        if(!self::$_token){
            self::generateToken();
        }
        foreach ($assoc as $key => $value){
            if(in_array($key,self::$_protectedKeys)){
                throw new Exception('Payload collision');
            }
            self::$_token[$key] = $value;
        }
    }

    /**
     * @param $time
     *
     * @return bool
     */
    static function expiresAt($time){
        if(!self::$_token){
            self::generateToken();
        }
        if(is_string($time)){
            $time = strtotime($time);
        }
        if($time===false){
            return false;
        }
        self::$_token['exp'] = $time;
        return true;
    }

    /**
     * @param $algorithm
     */
    static function setAlgorithm($algorithm){
        self::$_algorithm = $algorithm;
    }

    /**
     * @param $uniqueIdentifier
     */
    static function identifier($uniqueIdentifier){
        if(!self::$_token){
            self::generateToken();
        }
        self::$_token['jti'] = $uniqueIdentifier;
    }

    /**
     * @param $audienceUrl
     */
    static function audience($audienceUrl){
        if(!self::$_token){
            self::generateToken();
        }
        self::$_token['aud'] = $audienceUrl;
    }

    /**
     * Generates token
     */
    private static function generateToken(){
        self::$_token = [
            'iss'=>base,
            'aud'=>base,
            'iat'=>time()
        ];
    }

}
